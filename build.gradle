buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.4.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

mainClassName = 'br.com.hackerbrasileiro.webapp.Application'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile('org.projectlombok:lombok:1.16.4')
    testCompile("junit:junit")
    testCompile("org.mockito:mockito-all:1.8.4")
}

task hackerBrasileiroJar(type: Copy, dependsOn: ['clean', 'assemble']) {
    from jar.archivePath
    into project.rootDir
    rename {
        'hackerbrasileiro.jar'
    }
}

task bringUpAppServer(type: Exec) {
    commandLine "vagrant", "up", "--no-provision"
}

task provisionAppServer(type: Exec) {
    commandLine "vagrant", "provision"
}

provisionAppServer.mustRunAfter(bringUpAppServer)

task destroyAppServer(type: Exec) {
    commandLine "vagrant", "destroy", "--force"
}

hackerBrasileiroJar.mustRunAfter(clean)

clean << {
    project.file('hackerbrasileiro.jar').delete()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

test {

    clean.execute()
    testLogging.showStandardStreams = true

    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}
